The gui.py uses easygui to create a simpler method of use for non-technical users.

1. Create codebooks (if you are the cryptokey issuer)
    Select "Generate codebooks"
    Select which codes to generate (usually All)
    Select which format to generate
        NOTE: You should pick ONE method of using this system:

        A. Pen and Paper, using printed PDF or TXT format sheets that you physically cut out codes from once they are used.

        B. Airgapped computer using the ECCS GUI and Pickle files.
        Doing both and having multiple copies of codebooks would create the danger that the codes are not securely cleared from 
        all of them immediately once used. Multiple parties do not have to use the same method as messages encrypted on a computer 
        can be decrypted by hand, and vice versa, obviously excluding AES messages, but a single party should not mix them.
    Generated codepads will be in the "codebooks folder" with names such as "2022-05-12_288394_auth.pickle"
    The filename is obviously the date created, but also the key ID.

2. Select codebooks to use
    Select "Select codebooks"
    Enter the date and key ID that is in the filename, for example: 2022-05-12_288394_auth.pickle
    Date: 2022-05-12
    ID: 288394
    ECCS-GUI will now use those codes

3. Menu options
    AES Encrypt
        Will ask you "Choose key mode"
            Plain key: plain base64 key entered from paper or text
            Pickle keys: .pickle file that will have the key wiped automatically after
        Enter your message
        Will give you a PEM encoded message like following
        -----BEGIN AES MESSAGE 822308 A1A2B1-----
        PibfJjEUEv9KXPIe77k7jw==
        -----END AES MESSAGE 822308 A1A2B1-----
        The header contains the Key ID, the 2 key codes and the IV code, so you know that to decrypt you need the A1 and A2 key halves and B1 as IV from codebook 822308 
        You must not change the message header
    
    AES Decrypt
        Same as Encrypt except you input the encrypted message

    AES File Encrypt
        Same except AES Encrypt except you select a file instead of entering a message
        Encrypted file will be saved as *.enc

    AES File Decrypt
        Same as above but replaced
        Decrypted file will have the .enc file type removed

    One Time Pad Encrypt
        This requires pickle files
        Will encrypt a simple text message (few special characters allowed, see CT46-2.png)
        The resulting message will look like: 8223080000156741233206175865947
        822308: the codebook ID
        00001: the pad ID
        56741: the first 5 digits of the pad (not used for encryption, only validation)
        233206175865947: the actual encrypted message
        The encryption system uses the brevity codes to shorten the length of the message
        The system will automatically wipe the used pad
    
    One Time Pad Decrypt
        See above, simply enter the encrypted message and the system will automatically decrypt it and wipe the used pad

    Authentify
        Enter a verification code (example: A01) and you will get the corresponding authentification code (example: M39D), or vice-versa
        The system will automatically wipe the used code

    Select codebooks: see above

    Generate codebooks: see above

    Securely wipe file
        Uses shred to securely shred a file

    DESTROY CODEBOOKS
        Using shredcodes.sh this will securely wipe all codebooks, you will be asked for confirmation first. The script can also be run stand-alone.

    TEST MODE TOGGLE
        This is an UNSECURE debug mode which allows the re-use of codes, they will not be deleted from the files. Do not use this in a live environment. Controlled by "args_keeppad = True" in the code.

    Exit
